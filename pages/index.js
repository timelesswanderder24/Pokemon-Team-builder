import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import React from 'react';
import {useState} from 'react';
import { Card, Grid, CardContent, CardMedia, CardActions, Typography} from '@mui/material';
import Button from "../components/Button";


export default function Home() {
  const [team, addTeam] = useState([]);
  const [pokeNames, addPokeName] = useState([]);
  const [maxReached, maxUpdate] = useState(false);
  const [width, setWidth] = useState(0); 
    
  async function updateNewPoke(id, name, url) {  
    const response = await fetch('/api/pokemonTeamAPI', {
      method: 'POST',
      body: JSON.stringify({
        id,     
        name,   
        url
      }),
      headers: {
        'Content-Type': 'application/json'
      }
    })
    
  }

  async function getPokemon(search){
    if (search !== "") {
      const response = await fetch('/api/pokemonsAPI')
      const data = await response.json() 
      const final = data.filter(poke => poke.name.includes(search));
      return final;
    } 
  }

  
  async function refreshTeam() {
    const response = await fetch('/api/pokemonTeamAPI')
    const data = await response.json()
    console.log(data)
    addTeam(data);
  }

 async function addToTeam(search){ 
  
    if (search !== "" && !pokeNames.includes(search)) {
      const response = await fetch('/api/pokemonsAPI')
      const data = await response.json() 
      const final = data.filter(poke => poke.name.includes(search));
      const poke = final[0];
      updateNewPoke(poke.id, poke.name, poke.url)
      refreshTeam()
      addPokeName(poke.name)
      maxUpdate(false)
    } 
  
  }

 
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        
        <h1 className={styles.title}>
          Select pokemons for your team! 
        </h1>
      <div className={styles.grid}>
        <div className={styles.card} onClick={() => addToTeam("ditto")}>
            <h2>ditto</h2>
          </div>

          <div className={styles.card} onClick={() => addToTeam("charmander")}>
            <h2>charmander</h2>
          </div>

          <div className={styles.card} onClick={() => addToTeam("pikachu")}>
            <h2>pikachu</h2>
          </div>

          <div className={styles.card} onClick={() => addToTeam("Eevee")}>
            <h2>Eevee</h2>
          </div>

          <div className={styles.card} onClick={() => addToTeam("snorlax")}>
            <h2>snorlax</h2>
          </div>

          <div className={styles.card} onClick={() => addToTeam("Charizard")}>
            <h2>chizard</h2>
          </div>

          <div className={styles.card} onClick={() => addToTeam("piplup")}>
            <h2>piplup</h2>
          </div>

          <div className={styles.card} onClick={() => addToTeam("mewtwo")}>
            <h2>mewtwo</h2>
          </div>

          <div className={styles.card} onClick={() => addToTeam("squirtle")}>
            <h2>squirtle</h2>
          </div>

      </div>
    {team.length==0 ?(
      <div></div>
    ):(
      <div style={{alignItems:'center'}} className={styles.grid}>
        
      <h1 className={styles.title}>
      Your Pokemon team
      </h1>
      <Grid
          container
          spacing={0}
          direction="row"
          justifyContent="center"
        >
          {
            team.map((pokemon) =>
            <Card sx={{ backgroundColor: '#f6f6f4',  border: '10px solid white'}}>
              <CardMedia
              component="img"
              height="194"
              width = "194"
              image={pokemon.url}
              alt="pokemon image"/>
            <CardContent sx={{ justifyContent: 'center'}}>
              <Typography gutterBottom variant="h5" component="div">
                {pokemon.name}
              </Typography>
              <Button> {pokemon.name}</Button>
            </CardContent>
            <CardActions>
            </CardActions>
          </Card>
              
            )
          }
        </Grid>
      </div>
      
      
    )
    
    }
      
      </main>
      <footer className={styles.footer}>
      </footer>
    </div>
  )
}

/*
import Head from 'next/head'
import Favourites from '../components/Favourites';
import SearchResults from '../components/SearchResults';
import { styled } from '@mui/material/styles';
import React from 'react';
import { useState } from 'react';

const FavoriteSection = styled('div')(({ theme }) => ({ 
  display: 'flex',
  maxWidth: '100%',
  flexDirection: 'column',
  alignItems: 'center',
  textAlign: 'center',
  minWidth: "55%",
  [theme.breakpoints.up('sm')]: {
    top: 0,
    bottom:0,
    position:'fixed',
    overflowY:'scroll',
    overflowX:'hidden',
    maxWidth: '55%'
  },
}));

const ResultSection = styled('div')(({ theme }) => ({ 
  alignItems: 'center',
  textAlign: 'center',
  minWidth: '40%',
  justifyContent: 'center',
  [theme.breakpoints.up('sm')]: {
    marginLeft: "55%",
  },
}));

export default function App() {
  const [favourites, setFavourites] = useState([]);
  const [width, setWidth] = useState(0);

  function handleWindowSizeChange() {
      setWidth(window.innerWidth);
  }
  React.useEffect(() => {
    handleWindowSizeChange()
    window.addEventListener('resize', handleWindowSizeChange);
    return () => {
        window.removeEventListener('resize', handleWindowSizeChange);
    }
  }, []);
  const isMobile = width <= 600;

  async function refreshFavourite() {
    const response = await fetch('/api/favouriteAPI')
    const data = await response.json()
    console.log(data)
    setFavourites(data);
  }

  return (
    <div>
    {isMobile === true ? (
      <div style={{
        display: 'flex',
        flexDirection: 'column',
        alignItems: 'center'
      }}>
        <FavoriteSection>
          <Favourites favourites={favourites}/>
        </FavoriteSection>
        <ResultSection>
          <SearchResults refreshFavourite={refreshFavourite}/>
        </ResultSection>
      </div>
    ):(
      <div style={{
        display: 'flex',
        flexDirection: 'row',
      }}>
        <FavoriteSection>
          <Favourites favourites={favourites}/>
        </FavoriteSection>
        <ResultSection>
        <SearchResults refreshFavourite={refreshFavourite}/>
        </ResultSection>
      </div>
    )}
    </div>
  );
}
*/